{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAI,IAAMA,SAAS,CAAC,aAAD,CAAf;AACA,IAAMC,UAAU,CAAhB;AACA,IAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;IAEaC,iB,WAAAA,iB;AAET,iCAAa;AAAA;;AACT,cAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACH;;;;wCAEqB;;AAElB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;AACAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAFD;AAGAR,4BAAYS,SAAZ,GAAwB,aAAK;AACzB,wBAAG,CAAChB,UAAJ,EAAgB;AACZA,qCAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,gCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,mCAAWC,KAAX,GAAmB,YAAU;AACzB,kCAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACH,yBAFD;AAGH;AACDE,4BAAQL,UAAR;AACH,iBATD;AAUAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAIH,aApBM,CAAP;AAqBH;;;sCAEoBtB,U,EAAW;AAC5BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAAgD1B,WAAW2B,iBAAX,CAA6BD,KAA7B;AAChD1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,aAHD;AAIH;;;0CAEuB;;AAEpB,gBAAG7B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["    const stores = ['negociacoes'];\r\n    const version = 3;\r\n    const dbName = 'aluraframe';\r\n\r\n    let connection = null;\r\n    let close = null;\r\n\r\n    export class ConnectionFactory{\r\n\r\n        constructor(){\r\n            throw new Error('Não é possível criar uma instância de ConnectionFactory');\r\n        }\r\n\r\n        static getConnection(){\r\n\r\n            return new Promise((resolve, reject) => {\r\n                \r\n                let openRequest = window.indexedDB.open(dbName, version); \r\n                openRequest.onupgradeneeded = e => {\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n                openRequest.onsuccess = e => {\r\n                    if(!connection) {\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Você não pode fechar a conexão');\r\n                        };\r\n                    }\r\n                    resolve(connection);\r\n                };\r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n\r\n        static _createStores(connection){\r\n            stores.forEach(store => {\r\n                if(connection.objectStoreNames.contains(store)) connection.deleteObjectStore(store);\r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n"]}